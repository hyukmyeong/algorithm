#include <iostream>
#include <cstring>
#include <vector>
#include <map>

using namespace std;


#if 0
int solve(string text, string pattern)
{
  // memoization이 어려움
}

int cache[N][N];
int solve(int text_idx, int pattern_idx)
{
  int& ret = cache[text_idx][pattern_idx];
  if (ret != -1)
    return ret;
}
#endif

#if 0
map<vector<int>, int> cache;

int solve(vector<int>& key)
{
  int& ret = cache[key];
  if (ret != -1)
    return ret;

  ...
}

int mapping(cont vector<int>& key)
{
  ...
}

int solve(vector<int>& key>)
{
  int& ret = cache[mapping(key)];
  if (ret != -1)
    return ret;

  ...
}
#endif

#if 0
int factorials[12];

int getIndex(const vector<int>& X)
{
  int ret = 0;

  for (int i=0; i < X.size(); ++i) {

    int less = 0;

    for (int j=i+1; j < X.size(); ++j) {
      if (X[j] < X[i])
        ++less;
    }

    ret += factorials[X.size()-i-1] * less;
  }

  return ret;
}

int solve(vector<int>& key>)
{
  // int& ret = cache[getIndex(key)];
  // if (ret != -1)
  //   return ret;

  // ...
}
#endif

long long factorials[21];
vector<int> answer, possible;

int N;

long long getIndex(const vector<int> &X)
{
  long long result = 1;
  for (int i = 0; i < X.size(); i++) {
    int less = 0;

    //X[i+1..] 중 X[i]보다 작은 수를 샌다. 이것이 X 앞에 오는 묶음의 수
    for (int j = i + 1; j < X.size(); j++)

      if (X[j] < X[i])

        less++;

    result += factorials[X.size() - i - 1] * less;
  }
  return result;
}

void permutation(int cnt, int skip)
{
  if (cnt == N)
    return;

  int i = 0;
  for (;skip > factorials[N - cnt - 1]; i++)

    skip -= factorials[N - cnt - 1];

  answer.push_back(possible[i]);

  possible.erase(possible.begin() + i); //가능한 숫자에서 방금 삽입한 숫자 삭제

  permutation(cnt+1, skip);

}

void initialize(void)
{
  factorials[0] = factorials[1] = 1;
  for (int i = 2; i <= 20; i++)
    factorials[i] = i*factorials[i - 1];
}

int main(void)
{
  vector<int> X;
  int sel;

  cin >> N;
  if (N < 1 || N>20)
    exit(-1);

  cin >> sel;
  if (sel !=1 && sel != 2)
    exit(-1);

  initialize();

  switch (sel) {
    case 1:
      int skip;
      cin >> skip;
      for (int i = 1; i <= N; i++)
        possible.push_back(i);

      permutation(0, skip);

      for (int i = 0; i < N; i++) {
        cout << answer[i];
        if (i != N - 1)
          cout << " ";
      }
      cout << endl;
      break;
    case 2:
      for (int i = 0; i < N; i++) {
        int num;
        cin >> num;
        X.push_back(num);
      }
      cout << getIndex(X) << endl;
      break;
  }
  return 0;
}
